{"version":3,"sources":["Day.js","Period.js","Components/Spinner.js","Components/Alert.js","Utils/utils.js","Components/Meteo/Meteo.js","App.js","serviceWorker.js","index.js"],"names":["Day","props","cls","isActive","className","href","onClick","event","handleClick","label","Period","children","aria-label","Spinner","type","color","role","AlertError","title","pContent","bottomContent","getDayOfTheWeekFirstLetterCapitalized","date","undefined","Date","dayOFTheWeek","Intl","DateTimeFormat","weekday","format","toUpperCase","slice","Meteo","meteo","activeDay","src","icon","alt","description","temp","feel","humidity","style","position","top","left","transform","parseFloat","windDirection","height","meteo_key","App","today","React","useState","setActive","hasBeenSubmitted","setHasBeenSubmitted","submittedCity","setSubmittedCity","error","setError","setMeteo","useEffect","visitorCity","a","console","log","URLmeteo","fetch","meteoResponse","json","bodyMeteoResponse","ok","meteoOfTheWeek","list","reduce","accumulator","data","day","dt_txt","weather","push","city","main","feels_like","wind","deg","errorMessage","message","response","callAPI2","loading","activeDayMeteo","startDay","numberOfDays","daysOfTheWeek","i","length","actualElement","endOfArray","startOfArray","concat","getNextDaysOfTheWeek","map","action","onSubmit","preventDefault","target","value","placeholder","display","justifyContent","hour","width","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c2cf2e9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nexport function Day(props) {\r\n    let cls = \"page-item\";\r\n\r\n    if (props.isActive){\r\n        cls += \" active\"\r\n    }\r\n\r\n\r\n    return (\r\n        <li className={cls}>\r\n            <button className=\"page-link\" href=\"\" onClick={(event) => {\r\n                props.handleClick(props.label)\r\n\r\n            }}>{props.label}</button>\r\n        </li>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport './Day';\r\n\r\nexport function Period({children}) {\r\n    return (\r\n            <div className=\"d-flex justify-content-center\">\r\n                <nav aria-label=\"...\">\r\n                    <ul className=\"pagination pagination-lg\">\r\n                        {children}\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n    );\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport function Spinner({type = \"border\", color = \"primary\"}) {\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"d-flex justify-content-center mt-4\">\r\n            <div className={`spinner-${type} text-${color}`} role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSpinner.propTypes = {\r\n    color: PropTypes.oneOf([\"primary\", \"secondary\", \"success\",\r\n        \"warning\", \"danger\", \"light\", \"dark\", \"info\", \"muted\", \"white\"]),\r\n    type: PropTypes.oneOf([\"grow\", \"border\"])\r\n};\r\n\r\n// Spinner.defaultProps = {\r\n//     type: \"border\",\r\n//     color: \"primary\"\r\n// };\r\n\r\n\r\n\r\nexport function CircularSpinner({color}) {\r\n\r\n    return <Spinner color={color} type={\"border\"}/>\r\n}\r\n\r\nexport function GrowSpinner({color}) {\r\n\r\n    return <Spinner color={color} type={\"grow\"}/>\r\n}\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport function AlertSucces({title = true, color = \"success\", pContent = \"Error\"}) {\r\n\r\n    return <div className={`alert alert-${color}`} role=\"alert\">\r\n\r\n        {title ? <h4 className=\"alert-heading\">{title}</h4> : null}\r\n        {/*{title && <h4 className=\"alert-heading\">{title}</h4>}*/}\r\n\r\n        <p>{pContent}</p>\r\n        <hr/>\r\n            <p className=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\r\n    </div>\r\n}\r\n\r\nexport function AlertError({title = true, color = \"danger\", pContent = \"Error\", bottomContent = 'La ville n\\'existe pas'}) {\r\n\r\n    return <div className={`text-center alert alert-${color}`} role=\"alert\">\r\n\r\n        {title ? <h4 className=\"alert-heading\">Error !</h4> : \"\"}\r\n\r\n        <p>{pContent}</p>\r\n        <hr/>\r\n        <p className=\"mb-0\">{bottomContent}</p>\r\n    </div>\r\n}\r\n\r\nAlertSucces.propTypes = {\r\n    title: PropTypes.bool,\r\n    color: PropTypes.oneOf([\"primary\", \"secondary\", \"success\",\r\n        \"warning\", \"danger\", \"light\", \"dark\", \"info\", \"muted\", \"white\"]),\r\n    pContent: PropTypes.string\r\n};\r\n\r\nAlertError.propTypes = {\r\n    title: PropTypes.bool,\r\n    color: PropTypes.oneOf([\"primary\", \"secondary\", \"success\",\r\n        \"warning\", \"danger\", \"light\", \"dark\", \"info\", \"muted\", \"white\"]),\r\n    pContent: PropTypes.string,\r\n    bottomContent: PropTypes.string\r\n};","/**\r\n *\r\n * @param startDay\r\n * @param {int} numberOfDays\r\n *\r\n * @returns {string[]}\r\n *\r\n *\r\n */\r\nexport function getNextDaysOfTheWeek(startDay, numberOfDays) {\r\n    const daysOfTheWeek = [\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\", \"Dimanche\"];\r\n\r\n    for (let i = 0; i < daysOfTheWeek.length; i++) {\r\n\r\n        let actualElement = daysOfTheWeek[i];\r\n\r\n        if (startDay === \"Lundi\") {\r\n\r\n            let finalResult =  daysOfTheWeek.slice(0,numberOfDays);\r\n\r\n            return finalResult;\r\n        }\r\n\r\n        if (startDay === 'Mardi') {\r\n\r\nconsole.log(i);\r\n            let finalResult = daysOfTheWeek.slice(1,numberOfDays +1);\r\n\r\n            return finalResult;\r\n\r\n        }\r\n\r\n        if (actualElement === startDay) {\r\n\r\n            let endOfArray = daysOfTheWeek.slice(i);\r\n\r\n            let startOfArray = daysOfTheWeek.slice(0,(numberOfDays - endOfArray.length));\r\n\r\n            let finalResult =  endOfArray.concat(startOfArray);\r\n\r\n            return finalResult;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param date\r\n * @returns {string}\r\n */\r\nexport function getDayOfTheWeekFirstLetterCapitalized(date) {\r\n    if (date === false || date === undefined) {\r\n        date = new Date();\r\n    }\r\n    const dayOFTheWeek = new Intl.DateTimeFormat('fr-FR', {weekday: 'long'}).format(new Date(date));\r\n    const firstLetterCapitalizedDOTW = dayOFTheWeek[0].toUpperCase() + dayOFTheWeek.slice(1);\r\n\r\n    return firstLetterCapitalizedDOTW\r\n}","import React from \"react\";\r\nimport {render} from \"react-dom\";\r\n\r\nexport function Meteo({meteo, activeDay}) {\r\n\r\n    return(\r\n        <>\r\n            <div className=\"mt-3\">\r\n                <img\r\n                    src={\"https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/\" + meteo.icon + \".png\"}\r\n                    alt={meteo.description}/>\r\n\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n                Temps : {meteo.description}\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n                Temperature réel : {meteo.temp} ° C\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n                Température ressenti : {meteo.feel} ° C\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n                Humidité : {meteo.humidity} %\r\n            </div>\r\n\r\n\r\n            <div className={\"compass\"} style={\r\n                {\r\n                    position: \"relative\",\r\n                }\r\n            }>\r\n                <div className={\"North\"}>Nord <div>0</div></div>\r\n                <div className={\"West\"} style={\r\n                    {\r\n                        position: \"absolute\",\r\n                        top: \"140px\",\r\n                        left: \"35%\"\r\n                    }\r\n                }>West <div>270</div></div>\r\n\r\n                <div className={\"East\"} style={\r\n                    {\r\n                        position: \"absolute\",\r\n                        top: \"140px\",\r\n                        left: \"65%\"\r\n                    }\r\n                }>East <div>90</div></div>\r\n                <div className=\"mt-3\" style={\r\n                    {\r\n                        transform: `rotate(${parseFloat(meteo.windDirection) - 90}deg)`,\r\n                        // transform: `rotate(deg)`\r\n                        height: '200px',\r\n                        position: 'relative',\r\n                        top: '-50px'\r\n                    }\r\n\r\n                }>\r\n                    Sens du vent : {meteo.windDirection} degrés =>\r\n                </div>\r\n                <div className={\"South\"} style={\r\n                    {\r\n                        position: \"relative\",\r\n                        top: \"30px\"\r\n                    }\r\n                }>Sud <div>180</div></div>\r\n            </div>\r\n            {/*<AlertSucces title={false} color={\"warning\"} pContent={meteo.errorMessage}/>*/}\r\n        </>\r\n    )\r\n\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Day} from \"./Day\";\r\nimport {Period} from \"./Period\";\r\nimport {Spinner, GrowSpinner, CircularSpinner} from \"./Components/Spinner\";\r\nimport {AlertSucces, AlertError} from \"./Components/Alert\";\r\nimport {getDayOfTheWeekFirstLetterCapitalized} from \"./Utils/utils\";\r\nimport {getNextDaysOfTheWeek} from \"./Utils/utils\";\r\nimport {Meteo} from \"./Components/Meteo/Meteo\";\r\n\r\n\r\nconst meteo_key = \"e184943229e3aef2a626130052103510\";\r\nconst geo_key = \"a957754acf3dae958ecb2effe3ff8c58\";\r\nconst units = 'metric';\r\n\r\nconst URLipify = \"https://geo.ipify.org/api/v1?apiKey=at_HW1nsY1U7FJ8t5oT2rB03InkEuxtQ\";\r\n\r\n// const fullURL = \"http://api.openweathermap.org/data/2.5/forecast?q=Bordeaux&units=metric&appid=e184943229e3aef2a626130052103510\";\r\n\r\nfunction App() {\r\n\r\n\r\n    const today = getDayOfTheWeekFirstLetterCapitalized();\r\n\r\n    const [activeDay, setActive] = React.useState(today);\r\n    const [hasBeenSubmitted, setHasBeenSubmitted] = React.useState(false);\r\n    const [submittedCity, setSubmittedCity] = React.useState('Bordeaux');\r\n    const [error, setError] = React.useState(null);\r\n    const [meteo, setMeteo] = React.useState({});\r\n\r\n    // const state = React.useState();\r\n    // const activeDay = state[0];\r\n    // const setActiveDay = state[1];\r\n\r\n\r\n    React.useEffect(() => {\r\n        console.log('api calling...');\r\n\r\n        async function callAPI() {\r\n\r\n            const ipResponse = await fetch(URLipify);\r\n\r\n            const bodyIpResponse = await ipResponse.json();\r\n\r\n            let visitorIP = bodyIpResponse.ip;\r\n\r\n            console.log(visitorIP);\r\n\r\n            if (ipResponse.ok) {\r\n\r\n                const URLgeo = `http://api.ipstack.com/${visitorIP}?access_key=${geo_key}&format=1`;\r\n\r\n                const cityResponse = await fetch(URLgeo);\r\n\r\n                const bodyCityResponse = await cityResponse.json();\r\n\r\n                let visitorCity = bodyCityResponse.city;\r\n\r\n                console.log('visitor city ', bodyCityResponse.city);\r\n\r\n\r\n                console.log(\"D'apres ton ip, tu es dans les environs de : \" + visitorCity);\r\n\r\n                if (cityResponse.ok) {\r\n\r\n                    const URLmeteo = `http://api.openweathermap.org/data/2.5/forecast?q=${visitorCity}&units=${units}&appid=${meteo_key}&lang=fr`;\r\n\r\n                    const meteoResponse = await fetch(URLmeteo);\r\n\r\n                    const bodyMeteoResponse = await meteoResponse.json();\r\n\r\n                    // setLoading(false);\r\n\r\n                    if (meteoResponse.ok) {\r\n\r\n\r\n                        let meteoList = bodyMeteoResponse.list;\r\n\r\n                        const meteoOfTheWeek = meteoList.reduce((accumulator, data) => {\r\n\r\n                            const day = getDayOfTheWeekFirstLetterCapitalized(data.dt_txt);\r\n\r\n                            const description = data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1);\r\n\r\n                            console.log(day);\r\n\r\n                            if (!accumulator[day]) {\r\n                                accumulator[day] = []\r\n                            }\r\n\r\n                            accumulator[day].push({\r\n                                city: visitorCity,\r\n                                weather: data.weather[0].main,\r\n                                description: description,\r\n                                temp: data.main.temp,\r\n                                icon: data.weather[0].icon,\r\n                                feel: data.main.feels_like,\r\n                                humidity: data.main.humidity,\r\n                                windDirection: data.wind.deg\r\n                            });\r\n\r\n                            return accumulator;\r\n                        }, {});\r\n\r\n\r\n                        setMeteo(meteoOfTheWeek);\r\n                        setError(null);\r\n\r\n                    } else {\r\n                        const meteoOfTheWeek = {\r\n                            errorMessage: bodyMeteoResponse.message\r\n                        };\r\n                        setMeteo(meteoOfTheWeek);\r\n                        setError(bodyMeteoResponse.message);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // if (!hasBeenSubmitted) {\r\n        //\r\n        // callAPI();\r\n        //\r\n        // } else {\r\n\r\n        async function callAPI2(visitorCity) {\r\n\r\n            console.log('CALL API 2');\r\n\r\n            const URLmeteo = `http://api.openweathermap.org/data/2.5/forecast?q=${visitorCity}&units=${units}&appid=${meteo_key}&lang=fr`;\r\n\r\n            const meteoResponse = await fetch(URLmeteo);\r\n\r\n            console.log(\"meteoResponse\", meteoResponse);\r\n\r\n            const bodyMeteoResponse = await meteoResponse.json();\r\n            console.log(\"bodyMeteoResponse\", bodyMeteoResponse);\r\n            if (meteoResponse.ok) {\r\n\r\n                const meteoOfTheWeek = bodyMeteoResponse.list.reduce((accumulator, data) => {\r\n\r\n                    const day = getDayOfTheWeekFirstLetterCapitalized(data.dt_txt);\r\n\r\n                    const description = data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1);\r\n\r\n                    if (!accumulator[day]) {\r\n                        accumulator[day] = []\r\n                    }\r\n\r\n                    accumulator[day].push({\r\n                        city: visitorCity,\r\n                        weather: data.weather[0].main,\r\n                        description: description,\r\n                        temp: data.main.temp,\r\n                        icon: data.weather[0].icon,\r\n                        feel: data.main.feels_like,\r\n                        humidity: data.main.humidity,\r\n                        windDirection: data.wind.deg\r\n                    });\r\n\r\n                    return accumulator;\r\n                }, {});\r\n\r\n                // petite fonction qui capitalize la premiere lettre d'une string\r\n                // const description = data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1);\r\n\r\n                setMeteo(meteoOfTheWeek);\r\n                setError(null);\r\n\r\n            } else {\r\n\r\n                console.log(error);\r\n\r\n                const meteoOfTheWeek = {\r\n                    errorMessage: bodyMeteoResponse.message\r\n                };\r\n                setMeteo(meteoOfTheWeek);\r\n\r\n                bodyMeteoResponse.message === 'city not found' ?\r\n                    setError({message: 'La ville que vous recherchez n\\'as pas été trouvé ou n\\'existe pas.',\r\n                        response: bodyMeteoResponse.message\r\n                    })\r\n                 : setError({response: bodyMeteoResponse.message});\r\n\r\n\r\n\r\n            }\r\n        }\r\n\r\n\r\n        callAPI2(submittedCity);\r\n\r\n\r\n        // }\r\n\r\n    }, [submittedCity]);\r\n\r\n    console.log('submittedCity', submittedCity);\r\n\r\n    console.log('hasBeenSubmitted', hasBeenSubmitted);\r\n\r\n    const loading = !error && !meteo[activeDay];\r\n\r\n    console.log('loading ?', !error && !meteo[activeDay], 'error ?', !error);\r\n    console.log('error : ', error);\r\n\r\n    const activeDayMeteo = !loading && meteo[activeDay];\r\n\r\n    console.log(\"activeDayMeteo\", !loading && meteo[activeDay], activeDayMeteo);\r\n\r\n\r\n    // let city = !loading && meteo[activeDay][0].city;\r\n\r\n    // let city = \"Bordeaux\";\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        setHasBeenSubmitted(true);\r\n        setSubmittedCity(event.target[0].value);\r\n        console.log(\"Vous avez soumis : \", event.target[0].value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <button className=\"btn btn-success mb-4 mt-4\">Météo</button>\r\n            </div>\r\n            <Period>\r\n                {getNextDaysOfTheWeek(today, 5).map(function (day) {\r\n\r\n                    return (\r\n                        <Day label={day} isActive={activeDay === day} handleClick={setActive}/>\r\n                    )\r\n                })\r\n                }\r\n\r\n            </Period>\r\n\r\n            <h2 className={\"text-center\"}>Météo de {submittedCity}</h2>\r\n            <form action=\"\" onSubmit={handleSubmit} className={\"d-flex justify-content-center\"}>\r\n                <div className=\"form-group mx-sm-2 mb-2\">\r\n                    <input type=\"text\" placeholder=\"Search..\" className={\"text-center\"}/>\r\n                    <button type=\"submit\" className={\"text-center btn btn-primary ml-2\"}>Submit</button>\r\n                </div>\r\n            </form>\r\n            {loading ? <Spinner color=\"dark\" type=\"grow\"/>\r\n                : error ? <AlertError title={true} color={\"warning\"} pContent={error.response} bottomContent={error.message}/>\r\n                    : (\r\n\r\n                        <div className=\"text-center mt-3\" style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-evenly\"\r\n\r\n                        }}>\r\n\r\n                            {activeDayMeteo ?\r\n                                activeDayMeteo.map((hour) =>\r\n                                    <div className={\"bg bg-secondary rounded\"}\r\n                                         style={{width: \"20%\", border: \"1px black solid\"}}\r\n\r\n                                    ><Meteo\r\n                                        meteo={hour} activeDay={activeDay}\r\n                                    />\r\n                                    </div>) : <div>ERROR</div>\r\n                            }</div>\r\n                    )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}